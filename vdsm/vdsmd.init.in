#! /bin/sh
#
# Copyright 2006-2010 Red Hat, Inc. and/or its affiliates.
#
# Licensed to you under the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  See the files README and
# LICENSE_GPL_v2 which accompany this distribution.
#

# chkconfig: 2345 99 00
#
### BEGIN INIT INFO
# Provides: vdsmd
# Required-Start: $syslog $network
# Should-Start: $time
# Required-Stop: $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: init script for the VDS management server
# Short-Description: init script for the VDS management server
### END INIT INFO

VDSM_BIN="@VDSMDIR@/vdsm"
CONF_FILE="@CONFDIR@/vdsm.conf"
GETCONFITEM="@VDSMDIR@/get-conf-item"
prog=vdsm
PIDFILE=@VDSMRUNDIR@/vdsmd.pid
RESPAWNPIDFILE=@VDSMRUNDIR@/respawn.pid
CORE_DUMP_PATH="/var/log/core/core.%p.%t.dump"
CORE_PATTERN="/proc/sys/kernel/core_pattern"
# lock_file is needed only with sysv
LOCK_FILE="/var/lock/subsys/vdsmd"
NEEDED_SERVICES="iscsid multipathd rpcbind ntpd wdmd sanlock network libvirtd
                 supervdsmd"
CONFLICTING_SERVICES="libvirt-guests ksmtuned"
VDSM_TOOL="@BINDIR@/vdsm-tool"
NICE_LOWEST=-20
VDSMD_INIT_COMMON="@LIBEXECDIR@/vdsmd_init_common.sh"
RETVAL=0

is_coredump="$("${GETCONFITEM}" "${CONF_FILE}" vars core_dump_enable false | tr A-Z a-z)"
[ "${is_coredump}" != "true" ] && is_coredump=false

SYSTEMCTL_SKIP_REDIRECT=true

[ -f /etc/sysconfig/vdsm ] && . /etc/sysconfig/vdsm
. /etc/init.d/functions

log_failure_msg() { printf "$@"; failure "$@"; echo; }
log_success_msg() { printf "$@"; success "$@"; echo; }

acquire_lock() {
    # todo: add additional flock on free fd
    if [ -f "$LOCK_FILE" ]; then
        return 1
    fi
    touch "$LOCK_FILE"
    trap cleanup SIGINT SIGHUP SIGTERM
}

release_lock() {
    "@RM_PATH@" -f "$LOCK_FILE" > /dev/null 2>&1
}

test_already_running()
{
    if pidofproc -p "$RESPAWNPIDFILE" >/dev/null || \
       pidofproc -p "$PIDFILE" "$VDSM_BIN" >/dev/null; then
        log_success_msg "$prog: already running"
        return 0
    fi
    return 1
}

start() {
    local ret_val

    test_already_running && return 0

    if [ "${is_coredump}" = "true" ]; then
        export DAEMON_COREFILE_LIMIT=unlimited
        echo "${CORE_DUMP_PATH}" > "${CORE_PATTERN}"
    fi

    "${VDSMD_INIT_COMMON}" --shutdown-conflicting-srv "${CONFLICTING_SERVICES}"

    "${VDSMD_INIT_COMMON}" --start-needed-srv "${NEEDED_SERVICES}"

    "${VDSMD_INIT_COMMON}" --pre-start

    echo $"Starting up vdsm daemon: "
    NICELEVEL="${NICE_LOWEST}" daemon --user=vdsm "@VDSMDIR@/daemonAdapter" \
        -0 /dev/null -1 /dev/null -2 /dev/null "@VDSMDIR@/respawn" --minlifetime 10 \
        --daemon --masterpid "${RESPAWNPIDFILE}" "${VDSM_BIN}" --pidfile "${PIDFILE}"
    RETVAL=$?
    [ "$RETVAL" -eq 0 ] && log_success_msg $"$prog start" || log_failure_msg $"$prog start"
}

stop() {
    echo $"Shutting down vdsm daemon: "
    if has_systemd; then
        kill_instance
        return 0
    fi

    trap cleanup SIGINT SIGHUP SIGTERM
    if [ -f "$LOCK_FILE" ]; then
       if ! pidofproc -p "$RESPAWNPIDFILE" >/dev/null; then
           log_failure_msg "$prog during another start, cannot stop yet"
           return 1
       else
           kill_instance
           release_lock
       fi
    else
       log_failure_msg "$prog already stopped"
    fi

    return 0
}

kill_instance() {
    if killproc -p "$RESPAWNPIDFILE"; then
        log_success_msg $"$prog watchdog stop"
    fi
    if ! pidofproc -p "$PIDFILE" >/dev/null; then
        log_failure_msg "$prog: not running"
        RETVAL=0
    else
        killproc -p "$PIDFILE" -d 2
        RETVAL=$?
        [ "$RETVAL" -eq 0 ] && log_success_msg $"$prog stop" || log_failure_msg $"$prog stop"
    fi
    "${VDSMD_INIT_COMMON}" --post-stop
}

cleanup() {
    echo "Unexpected signal received, cleaning locks"
    if pidofproc -p "$RESPAWNPIDFILE" >/dev/null ||
       pidofproc -p "$PIDFILE" >/dev/null; then
        kill_instance
    fi
    release_lock
    exit 0
}

locked_start() {
    if ! acquire_lock; then
        log_failure_msg "cannot start VDS daemon when another instance runs"
        return 1
    else
        start || (release_lock && return 1)
    fi
}

case "$1" in
     start)
         if has_systemd; then
             start
         else
             locked_start
         fi
         RETVAL=$?
    ;;
     stop)
        stop
        RETVAL=$?
    ;;
     status)
    pidofproc -p "$PIDFILE" "$VDSM_BIN" >/dev/null
    RETVAL=$?
    if [ "$RETVAL" -eq 0 ]; then
        echo "VDS daemon server is running"
    else
        if ! has_systemd && [ -f "$LOCK_FILE" ]; then
            printf "VDS daemon dead but subsys locked"
        else
            printf "VDS daemon is not running"
        fi
        if pidofproc -p "$RESPAWNPIDFILE" >/dev/null; then
            echo ", and its watchdog is running"
        else
            echo
        fi
    fi
    ;;
     condrestart)
    pidofproc -p "$PIDFILE" "$VDSM_BIN" >/dev/null
    RETVAL=$?
    if [ "$RETVAL" -eq 0 ]; then
        "$0" stop && "$0" start;
        RETVAL=$?;
    fi;
        ;;
     try-restart)
    "$0" stop && "$0" start
    RETVAL=$?
    ;;
     restart|force-reload)
    "$0" stop
    "$0" start
    RETVAL=$?
    ;;
    reconfigure)
        # Jump over 'reconfigure'
        shift 1
        "${VDSMD_INIT_COMMON}" --reconfigure "$@"
    RETVAL=$?
    ;;
     *)
    echo "Usage: $0 {start|stop|status|restart|force-reload|try-restart}"
    RETVAL=2
esac

exit "$RETVAL"

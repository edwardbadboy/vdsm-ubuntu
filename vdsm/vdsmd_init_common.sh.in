#!/bin/sh
# Copyright 2013 IBM, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#

VDSM_TOOL="@BINDIR@/vdsm-tool"
prog=vdsm


#### pre-start tasks ####
task_run_init_hooks(){
    "@PYTHON@" "@VDSMDIR@/hooks.pyc" before_vdsm_start
}


task_gencerts(){
    if ! "@LIBEXECDIR@/vdsm-gencerts.sh" --check; then
        printf "Configuring a self-signed VDSM host certificate"
        "@LIBEXECDIR@/vdsm-gencerts.sh" || return 1
    fi
    return 0
}


task_reconfigure_sanlock() {
    _reconfigure_sanlock
}

_reconfigure_sanlock() {
    # If sanlock was started before the *first* installation of vdsm
    # then it is probably missing the supplementary groups.
    # Here we attempt to restart the service (when needed) to refresh
    # the groups.
    "$VDSM_TOOL" sanlock-check-service
    if [ $? != 0 ]; then
        echo -n "Attempting to restart sanlock service:"
        "$VDSM_TOOL" service-restart sanlock || return 1
    fi
}


_reconfigure_libvirt() {
    if [ "$1" = "force" ]; then
        "$VDSM_TOOL" libvirt-configure --force
    else
        "$VDSM_TOOL" libvirt-configure
    fi
}

task_reconfigure_libvirt(){
    _reconfigure_libvirt
}


task_syslog_available() {
    if ! [ -S "/dev/log" ]; then
        echo "Cannot communicate with syslog deamon for reports. " \
             "Check rsyslog.conf"
        return 1
    fi
    return 0
}


task_nwfilter(){
    "${VDSM_TOOL}" nwfilter
}


task_dummybr(){
    "${VDSM_TOOL}" dummybr
}


_has_systemd() {
    "@MOUNTPOINT_PATH@" -q /cgroup/systemd ||
        "@MOUNTPOINT_PATH@" -q /sys/fs/cgroup/systemd
}


task_load_needed_modules(){
    if ! _has_systemd; then
        "${VDSM_TOOL}" load-needed-modules
    fi
}


task_tune_system(){
    "@SYSCTL_PATH@" -q -p "/etc/sysctl.d/vdsm"
}


_CONF_FILE="@CONFDIR@/vdsm.conf"
_GETCONFITEM="@VDSMDIR@/get-conf-item"
_DOM_METADATA_BACKUP_DIR="@VDSMLOGDIR@/backup"

_mk_data_center() {
    local dc
    dc="$("${_GETCONFITEM}" "${_CONF_FILE}" irs repository /rhev/)"
    @MKDIR_P@ "${dc}"
    "@CHOWN_PATH@" vdsm.kvm "${dc}"
}

_mk_dom_backup() {
    @MKDIR_P@ "${_DOM_METADATA_BACKUP_DIR}" > /dev/null 2>&1
    "@CHOWN_PATH@" vdsm.kvm "$(dirname "${_DOM_METADATA_BACKUP_DIR}")" > /dev/null 2>&1
    "@CHOWN_PATH@" vdsm.kvm "${_DOM_METADATA_BACKUP_DIR}" > /dev/null 2>&1
}

_mk_core_path() {
    local core_path=/var/log/core
    if ! [ -d "${core_path}" ]; then
        @MKDIR_P@ "${core_path}" > /dev/null 2>&1
    fi
    "@CHMOD_PATH@" a+tw "${core_path}" > /dev/null 2>&1
}

_mk_run_path() {
    local run_path

    for run_path in "@VDSMRUNDIR@" "@POOLSDIR@"; do
        @MKDIR_P@ "${run_path}"
        "@CHMOD_PATH@" 755 "${run_path}"
        "@CHOWN_PATH@" vdsm:kvm "${run_path}"
        "@RESTORECON_PATH@" "${run_path}"
    done
}

task_mkdirs(){
    _mk_data_center
    _mk_core_path
    _mk_dom_backup
    _mk_run_path
    "@CHMOD_PATH@" 1777 /dev/shm
}


_free_space() {
    local pathToTest="$1"
    df -P "${pathToTest}" | awk '{print $4}'| tail -1
}

task_test_space() {
    local MIN_SPACE_KB=10000

    if [ "$(_free_space "@VDSMLOGDIR@")" -lt "${MIN_SPACE_KB}" ]; then
        echo "${prog}: low log space"
        return 1
    fi
    return 0
}


task_test_lo() {
    if ! LC_ALL=C "@IP_PATH@" link show lo | "@GREP_PATH@" -q UP; then
        echo "VDSMD: lo interface is down, can't run !"
        echo "VDSMD: lo interface is down, can't run !" > /dev/kmsg
        return 1
    fi
    return 0
}


task_test_conflicting_conf(){
    "$VDSM_TOOL" libvirt-test-conflicts
}
#### pre-start tasks end ####


#### post-stop tasks ####
task_run_final_hooks(){
    "@PYTHON@" "@VDSMDIR@/hooks.pyc" after_vdsm_stop
}
#### post-stop tasks end ####


#### service management functions ####
start_needed_srv() {
    local srv
    local ret_val
    local needed_services="$1"

    for srv in ${needed_services}; do
        if ! "$VDSM_TOOL" service-status "$srv" > /dev/null 2>&1; then
            echo "Starting $srv..."
            "$VDSM_TOOL" service-start "$srv"
            ret_val=$?
            if [ "$ret_val" -ne 0 ]; then
                echo "$prog: Dependent $srv failed to start"
                return "$ret_val"
            fi
        fi
    done
}

shutdown_conflicting_srv() {
    local srv
    local conflicting_services="$1"

    for srv in ${conflicting_services}; do
        "$VDSM_TOOL" service-disable "$srv"
        if "$VDSM_TOOL" service-status "$srv" > /dev/null 2>&1; then
            if [ "$srv" = "libvirt-guests" ]; then
                "@RM_PATH@" -f /var/lock/subsys/libvirt-guests
            else
                "$VDSM_TOOL" service-stop "$srv"
            fi
        fi
    done
    return 0
}
#### service management functions end ####


usage(){
    echo "Usage:"
    echo "vdsm_init_common.sh --pre-start|--post-stop"
    echo "vdsm_init_common.sh --start-needed-srv|--shutdown-conflicting-srv" \
         "\"srv1 srv2 ...\""
}

run_tasks(){
    local tasks="$1"
    for taskName in $tasks ; do
        echo "${prog}: Running ${taskName}"
        "task_${taskName}"
        rt=$?
        if [ "$rt" -ne 0 ]; then
            echo "${prog}: failed to execute ${taskName}, error code ${rt}"
            exit 1
        fi
    done
}

case "$1" in
    --pre-start)
        run_tasks " \
            run_init_hooks gencerts reconfigure_sanlock reconfigure_libvirt \
            syslog_available nwfilter dummybr load_needed_modules \
            tune_system mkdirs test_space test_lo test_conflicting_conf"
        ;;
    --post-stop)
        run_tasks "run_final_hooks"
        ;;
    --reconfigure)
        shift
        _reconfigure_sanlock
        _reconfigure_libvirt "$@"
        ;;
    --start-needed-srv)
        shift
        start_needed_srv "$@"
        ;;
    --shutdown-conflicting-srv)
        shift
        shutdown_conflicting_srv "$@"
        ;;
    --help|*)
        usage
        exit 1
        ;;
esac
